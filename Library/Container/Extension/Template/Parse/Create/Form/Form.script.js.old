/*<meta> {
    "prio" : 5
} </meta>*/
;

(function ($, window, document, undefined) {

    "use strict";

    // undefined is used here as the undefined global variable in ECMAScript 3 is
    // mutable (ie. it can be changed by someone else). undefined isn't really being
    // passed in so we can ensure the value of it is truly undefined. In ES5, undefined
    // can no longer be modified.

    // window and document are passed through as local variable rather than global
    // as this (slightly) quickens the resolution process and can be more efficiently
    // minified (especially dwhen both are regularly referenced in your plugin).

    // Create the defaults once
    var pluginName = "CMSContainerExtensionTemplateParseForm",
        defaults = {};

    var pluginFormAjax = $.CMSAjax({
        'path': "Container/Extension/Template/Parse/Form",
        'dataType': 'json',
        'onSuccess': function (elementSettings, resultData) {


        }
    });

    var pluginMethods = {
        'trigger': function (options, args) {
            this.pluginFormAjax.trigger(options)
        }
    };

    // The actual plugin constructor
    function Plugin(element, options) {
        this.pluginFormAjax = pluginFormAjax;
        this.element = element;
        this.settings = $.extend({}, defaults, options);
        this._methods = pluginMethods;
        this._defaults = defaults;
        this._name = 'CMSContainerExtensionTemplateParseForm';
        this.init();
    }

    // Avoid Plugin.prototype conflicts
    $.extend(Plugin.prototype, {
        init: function () {
            var $this = this;

        },
        trigger: function (options) {
            var args = arguments;
            this._methods['trigger'].call(this, options, args);
        }
    });

    // A really lightweight plugin wrapper around the constructor,
    // preventing against multiple instantiations
    $.pluginFormAjax = function (options) {
        var args = arguments;
        return $.data(this, 'plugin_CMSContainerExtensionTemplateParseForm', new Plugin(this, options));
    };

})(jQuery, window, document);

_globalFunctions['ExtensionTemplateParseForm'] = function (element) {
    let formAjax = jQuery.pluginFormAjax();

    element.bind("submit", function (event) {
        event.preventDefault();

        var ajaxData = jQuery(event.target).serializeArray();
        var ajaxDataForm = new Object();

        jQuery.each(ajaxData, function (index, value) {
            ajaxDataForm[value.name] = value.value;
        });

        formAjax.trigger({
            "data": ajaxDataForm,
        });

    });
};

pushDataTrigger('extensiontemplateparseform', function (element) {
    _globalFunctions['ExtensionTemplateParseForm'].call(this, element);
});

